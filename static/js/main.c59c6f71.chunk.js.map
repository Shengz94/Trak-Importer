{"version":3,"sources":["Helper/Helper.js","components/ImportFromList.js","Helper/TraktAPI.js","components/TitleImportCard.js","components/ImportToTrakt.js","components/Login.js","components/Result.js","components/Gateway.js","index.js"],"names":["isNull","variable","undefined","withRouter","props","useState","file","setFile","type","onChange","e","preventDefault","target","files","browseFile","Button","disabled","onClick","reader","FileReader","onload","a","source","result","split","titles","Map","forEach","element","title","id","uuidv4","sourceTitle","traktTitle","selected","import","set","populateTitles","readAsText","history","push","TRAKT_API_KEY","TRAKT_DOMAIN","TRAKT_REDIRECT_URI","ImportToTrakt","className","values","map","updateTitle","handleImportCheckBox","handleSelectedChange","uri","encodeURI","size","variant","window","location","href","Result","Gateway","setTitles","setUser","localStorage","getItem","userToken","setUserToken","useEffect","setItem","console","log","code","URLSearchParams","search","get","fetch","headers","body","method","then","response","json","data","access_token","expireIn","expires_in","refreshToken","refresh_token","created_at","getToken","token","username","name","uuid","ids","slug","image","images","avatar","full","basename","process","exact","path","to","input","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"uPAOeA,MANf,SAAgBC,GACZ,MAAoB,cAAbA,GAAyC,SAAbA,GACnB,KAAbA,GAAuC,qBAAbA,QACbC,IAAbD,GAAuC,OAAbA,G,eCuClBE,eArCQ,SAACC,GAAW,IAAD,EACFC,qBADE,gCAERA,sBAFQ,mBAEzBC,EAFyB,KAEnBC,EAFmB,KA6BhC,OACE,gCACE,uBAAOC,KAAK,OAAOC,SAAU,SAACC,GAAD,OA3BjC,SAAqBA,GACnBA,EAAEC,iBACFJ,EAAQG,EAAEE,OAAOC,MAAM,IAyBeC,CAAWJ,MAC/C,cAACK,EAAA,EAAD,CAAQC,SAAUhB,EAAOM,GAAOW,QAxBpC,WACE,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAP,uCAAgB,WAAOV,GAAP,iBAAAW,EAAA,sDACRC,EAASZ,EAAEE,OAAOW,OAAOC,MAAM,MACjCC,EAAS,IAAIC,IACjBJ,EAAOK,SAAQ,SAAAC,GACb,IAAIC,EAAQ,CACVC,GAAIC,cACJC,YAAaJ,EACbK,WAAY,GACZC,SAAU,GACVC,QAAQ,GAEVV,EAAOW,IAAIP,EAAMC,GAAID,MAEvBzB,EAAMiC,eAAeZ,GAbP,2CAAhB,sDAeAP,EAAOoB,WAAWhC,GAClBF,EAAMmC,QAAQC,KAAK,kBAMjB,kC,QCpCAC,G,MAAgB,oEAEhBC,EAAe,wBAOfC,EAAqB,oDCP3B,ICeeC,EAhBO,SAACxC,GAMrB,OACE,sBAAKyC,UAAU,aAAf,UACK,YAAIzC,EAAMqB,OAAOqB,UAAUC,KAAI,SAAAlB,GACgBzB,EAAM4C,YAAmC5C,EAAM6C,qBAA4C7C,EAAM8C,wBAEjJ,cAACnC,EAAA,EAAD,CAAQE,QATd,aASM,+BCOOd,eAhBD,SAACC,GAEX,IAAM+C,EHOCT,gCAAiDD,EACtD,iBAAmBW,UAAUT,GAAsB,sBGDrD,OACI,8BACI,cAAC5B,EAAA,EAAD,CAAQsC,KAAK,QAAQC,QAAQ,YAAYrC,QAPjD,WACIsC,OAAOC,SAASC,KAAON,GAMnB,yBCNGO,EARA,SAACtD,GAEd,OACE,yBCiFWuD,EA7EC,SAACvD,GAAW,IAAD,EACGC,mBAAS,IAAIqB,KADhB,mBACVkC,GADU,aAEHvD,mBAAS,IAFN,gCAGDA,sBAHC,mBAGZwD,GAHY,aAISxD,mBAASyD,aAAaC,QAAQ,cAJvC,mBAIlBC,EAJkB,KAIPC,EAJO,KAsDzB,OA/CAC,qBAAU,WACRJ,aAAaK,QAAQ,YAAaH,KACjC,CAACA,IAEJE,qBAAU,WAER,GADAE,QAAQC,IAAIL,GACThE,EAAOgE,GAAW,CACnB,IACIM,EADS,IAAIC,gBAAgBhB,OAAOC,SAASgB,QAC/BC,IAAI,QACtBL,QAAQC,IAAIC,GACRtE,EAAOsE,KACTF,QAAQC,IAAI,OLTpB,SAAkBC,GAkBd,OAAOI,MAjBQhC,oCACF,CACTiC,QAAQ,CACJ,eAAgB,mBAChB,gBAAiBlC,EACjB,oBAAqB,KAEzBmC,KAAK,CACD,KAAQN,EACR,UAAa7B,EACb,cA1Ba,mEA2Bb,aAAgBE,EAChB,WAAc,sBAElBkC,OAAQ,SAGmBC,MAAK,SAACC,GAEjC,OADAX,QAAQC,IAAIU,GACLA,EAASC,UACjBF,MAAK,SAACG,GAQL,MAPa,CACTC,aAAcD,EAAKC,aACnBC,SAAUF,EAAKG,WACfC,aAAcJ,EAAKK,cACnBC,WAAYN,EAAKM,eKhBrBC,CAASlB,GAAMQ,MAAK,SAACG,GLgH7B,IAAqBQ,EK/GXrB,QAAQC,IAAI,QAAUY,EAAKC,cAC3BjB,EAAagB,EAAKC,eL8GPO,EK5GCR,EAAKC,aLwHhBR,MAXQhC,uCACF,CACTiC,QAAQ,CACJ,eAAgB,mBAChB,gBAAiBlC,EACjB,oBAAqB,IACrB,cAAiB,UAAYgD,GAEjCZ,OAAO,QAGoBC,MAAK,SAACC,GACjC,OAAOA,EAASC,UACjBF,MAAK,SAACG,GASL,MARW,CACPS,SAAUT,EAAKS,SACfC,KAAMV,EAAKU,KACXC,KAAMX,EAAKY,IAAID,KACfE,KAAMb,EAAKY,IAAIC,KACfC,MAAOd,EAAKe,OAAOC,OAAOC,UKhIGpB,MAAK,SAACG,GACnCpB,EAAQoB,aAKf,IA0BD,cAAC,IAAD,CAAekB,SAAUC,kBAAzB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACItG,EAAOgE,GAAqC,cAAC,EAAD,IAAxB,cAAC,IAAD,CAAUuC,GAAG,WAErC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,QAAlB,SACE,cAAC,EAAD,CAAgBjE,eAAgB,SAACmE,GAAD,OA9BxC,SAAwBA,GACtB5C,EAAU4C,GACVpC,QAAQC,IAAImC,GA4BqCnE,CAAemE,QAE5D,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,QAAQG,OAAQ,kBAChC,cAAC,EAAD,OAEF,cAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,gBAAgBG,OAAQ,kBACxC,cAAC,EAAD,OAEF,cAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,UAAUG,OAAQ,kBAClC,cAAC,EAAD,aC1EVC,IAASD,OACP,cAAC,IAAME,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c59c6f71.chunk.js","sourcesContent":["\nfunction isNull(variable){\n    return variable === \"undefined\" || variable === \"null\" \n    || variable === \"\" || typeof variable === \"undefined\"\n    || variable === undefined || variable === null;\n}\n\nexport default isNull;","import React, {useState, useEffect} from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport isNull from \"../Helper/Helper\";\nimport { withRouter } from \"react-router-dom\";\nimport { v4 as uuidv4 } from 'uuid';\n\nconst ImportFromList = (props) => {\n  const [rawText, setRawText] = useState();\n  const [file, setFile] = useState();\n\n  function browseFile (e) {\n    e.preventDefault();\n    setFile(e.target.files[0]);\n  }  \n  function processFile(){\n    const reader = new FileReader();\n    reader.onload = async (e) => { \n      const source = e.target.result.split(\"\\n\");\n      var titles = new Map();\n      source.forEach(element => {\n        var title = {\n          id: uuidv4(),\n          sourceTitle: element,\n          traktTitle: [],\n          selected: {},\n          import: true\n        }\n        titles.set(title.id, title);\n      });\n      props.populateTitles(titles)\n    };\n    reader.readAsText(file);\n    props.history.push(\"/Import-Trakt\");\n  }\n\n  return (\n    <div>\n      <input type=\"file\" onChange={(e) => browseFile(e)} />\n      <Button disabled={isNull(file)} onClick={processFile}>Process titles</Button>\n    </div>\n  );\n};\n\nexport default withRouter(ImportFromList);","\n\nconst TRAKT_API_KEY = \"3f2a4833bca232c1afbb66c2a56447e7d75b44372af9d45f11cf0b907b326b92\";\nconst TRAKT_API_SECRET = \"ea9ac4d176818616f44dc3a3d643cf73569590ae0c055d2dc190023d9762ea81\";\nconst TRAKT_DOMAIN = \"https://api.trakt.tv/\";\nconst TRAKT_SEARCH = \"search/movie,show?query=\";\nconst TRAKT_ADD = \"sync/history/\";\nconst TRAKT_REMOVE = \"sync/history/remove/\";\nconst TRAKT_AUTHORIZE = \"oauth/authorize/\";\nconst TRAKT_GET_TOKEN = \"oauth/token/\";\nconst TRAKT_USER_INFO = \"users/settings/\";\nconst TRAKT_REDIRECT_URI = \"https://shengz94.github.io/trak-history-importer/\";\n\nfunction getAuthenticationURI(){\n    return TRAKT_DOMAIN + TRAKT_AUTHORIZE + \"?client_id=\" + TRAKT_API_KEY \n    + \"&redirect_uri=\" + encodeURI(TRAKT_REDIRECT_URI) + \"&response_type=code\";\n}\n\nfunction getToken(code){\n    let endpoint = TRAKT_DOMAIN + TRAKT_GET_TOKEN;\n    let params = {\n        headers:{\n            \"Content-Type\": \"application/json\",\n            \"trakt-api-key\": TRAKT_API_KEY,\n            \"trakt-api-version\": \"2\"\n        },\n        body:{\n            \"code\": code,\n            \"client_id\": TRAKT_API_KEY,\n            \"client_secret\": TRAKT_API_SECRET,\n            \"redirect_uri\": TRAKT_REDIRECT_URI,\n            \"grant_type\": \"authorization_code\"\n        },\n        method: \"post\"\n    };\n\n    return fetch(endpoint, params).then((response) => {\n        console.log(response);\n        return response.json();\n    }).then((data) => {\n        var result = {\n            access_token: data.access_token,\n            expireIn: data.expires_in,\n            refreshToken: data.refresh_token,\n            created_at: data.created_at\n        };\n\n        return result;\n    });\n\n}\n\nfunction checkToken(){\n    //check if token is stored in web storage, if not, return false\n}\n\nfunction searchForTitle(title){\n    let endpoint = TRAKT_DOMAIN + TRAKT_SEARCH + encodeURI(title);\n    let params = {\n        headers:{\n            \"Content-Type\": \"application/json\",\n            \"trakt-api-key\": TRAKT_API_KEY,\n            \"trakt-api-version\": \"2\"\n        },\n        method: \"get\"\n    };\n\n    return fetch(endpoint, params).then((response) => {\n        return response.json();\n    }).then((data) => {\n\n        var result = [];\n\n        data.forEach(element => {\n            var current = element.type === \"movie\" ? element.movie : element.show;\n            var entry = {\n                type: element.type,\n                title: current.title,\n                year: current.year,\n                id: current.ids.trakt,\n                slug: current.ids.slug\n            }\n            result.push(entry);\n        });\n\n        return result;\n    });\n}\n\nfunction addToHistory(id, type, token){\n    let itemType = type + \"s\";\n    let endpoint = TRAKT_DOMAIN + TRAKT_ADD;\n    let params = {\n        headers:{\n            \"Content-Type\": \"application/json\",\n            \"trakt-api-key\": TRAKT_API_KEY,\n            \"trakt-api-version\": \"2\",\n            \"Authorization\": \"Bearer \" + token\n        },\n        body:{\n            [itemType]:[{\n                \"ids\":{\n                    \"trakt\":id\n                }\n            }]\n        },\n        method: \"post\"\n    };\n\n    return fetch(endpoint, params).then((response) => {\n        return response.json();\n    }).then((data) => {\n        var result = {\n            added:{\n                movies: data.added.movies,\n                episodes: data.added.episodes\n            },\n            notFound: {\n                movies: [],\n                shows: [],\n                seasons: [],\n                episodes: []\n            }\n        };\n        data.not_found.movies.forEach(element => {\n            result.notFound.movies.push(element);\n        });\n        data.not_found.shows.forEach(element => {\n            result.notFound.shows.push(element);\n        });\n        data.not_found.seasons.forEach(element => {\n            result.notFound.seasons.push(element);\n        });\n        data.not_found.episodes.forEach(element => {\n            result.notFound.episodes.push(element);\n        });\n        return result;\n    });\n}\n\nfunction getUserInfo(token){\n    let endpoint = TRAKT_DOMAIN + TRAKT_USER_INFO;\n    let params = {\n        headers:{\n            \"Content-Type\": \"application/json\",\n            \"trakt-api-key\": TRAKT_API_KEY,\n            \"trakt-api-version\": \"2\",\n            \"Authorization\": \"Bearer \" + token\n        },\n        method:\"get\"\n    };\n\n    return fetch(endpoint, params).then((response) => {\n        return response.json();\n    }).then((data) => {\n        var user = {\n            username: data.username,\n            name: data.name,\n            uuid: data.ids.uuid,\n            slug: data.ids.slug,\n            image: data.images.avatar.full,\n        }\n\n        return user;\n    });\n}\n\n\n\nexport {getAuthenticationURI, getToken, searchForTitle, addToHistory, getUserInfo}","import React, { Fragment, useEffect, useState } from \"react\";\nimport isNull from \"../Helper/Helper\";\nimport {searchForTitle} from \"../Helper/TraktAPI\"\n\nconst TitleImport = (props) => {\n  const [ready, setReady] = useState(false);\n  const [numCards, setNumCards] = useState();\n  const [currentNumCards, setCurrentNumCards] = useState(0);\n\n  useEffect(() => {\n    populateTrakTitle();\n  }, []);\n\n  useEffect(() => {\n    if(numCards === currentNumCards){\n      setReady(true);\n    }\n  }, [currentNumCards]);\n\n  function populateTrakTitle(){\n    setNumCards(props.titles.size());\n    props.titles.forEach(element => {\n      var tempElement = element;\n      searchForTitle(tempElement.sourceTitle).then(data => {\n        tempElement.traktTitle = data;\n        if(!isNull(data)){\n          tempElement.selected = data[0];\n        }\n        props.updateTitle(tempElement.id, tempElement);\n        setCurrentNumCards(currentNumCards + 1);\n      });\n    });\n  }\n\n  return (\n    <div className=\"title-import-card\">\n      {ready ?\n        <Fragment>\n          <div className=\"checkbox-import\">\n            <input type=\"checkbox\" checked={props.title.import} onChange={() => props.handleImportCheckBox(props.title.id)} />\n          </div>\n          <div className=\"source-name\">\n            <span>Input title: {props.title.source}</span>\n          </div>\n          <div className=\"trakt-title\">\n            <label>\n              Trakt title:\n              <select disabled={isNull(props.title.selected)} value={props.title.selected.title} onChange={(e) => props.handleSelectedChange(props.title.id, e.target.value)}>\n                {props.title.traktTitle.maps((title) => {\n                  <option value={title}>{title.title}</option>\n                })}\n              </select>\n            </label>\n          </div>\n        </Fragment>\n        :\n        <Fragment/>\n      }\n    </div>    \n  );\n};\n\nexport default TitleImport;","import { Button } from \"@material-ui/core\"\nimport TitleImportCard from \"./TitleImportCard\";\n\nconst ImportToTrakt = (props) => {\n\n  function importTitles(){\n\n  }\n\n  return (\n    <div className=\"title-list\">\n        {[...props.titles.values()].map(title => {\n            <TitleImportCard title={title} updateTitle={props.updateTitle} handleImportCheckBox={props.handleImportCheckBox} handleSelectedChange={props.handleSelectedChange}/>\n        })}\n        <Button onClick={importTitles}>Import titles</Button>\n    </div>\n  );\n};\n\nexport default ImportToTrakt;","import React from \"react\";\nimport {getAuthenticationURI} from \"../Helper/TraktAPI\";\nimport { Button } from \"@material-ui/core\";\nimport { withRouter} from \"react-router-dom\";\n\nconst Login = (props) => {\n\n    const uri = getAuthenticationURI();\n    \n    function goToAutheticationPage(){\n        window.location.href = uri;\n    }\n\n\n    return (\n        <div>\n            <Button size=\"small\" variant=\"contained\" onClick={goToAutheticationPage}>Log in</Button>\n        </div>\n    );\n};\n\nexport default withRouter(Login);","import React from \"react\";\n\nconst Result = (props) => {\n\n  return (\n    <div>\n    </div>\n  );\n};\n\nexport default Result;","import React, {useEffect, useState}  from \"react\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport ImportFromList from \"./ImportFromList\";\nimport ImportToTrakt from \"./ImportToTrakt\";\nimport Login from \"./Login\";\nimport Result from \"./Result\";\nimport {getToken, getUserInfo} from \"../Helper/TraktAPI\";\nimport isNull from \"../Helper/Helper\";\n\nconst Gateway = (props) => {\n  const [titles, setTitles] = useState(new Map());\n  const [log, setLog] = useState([]);\n  const [user, setUser] = useState();\n  const [userToken, setUserToken] = useState(localStorage.getItem(\"userToken\"));\n\n\n  useEffect(() => {\n    localStorage.setItem(\"userToken\", userToken);\n  }, [userToken]);\n\n  useEffect(() => {\n    console.log(userToken);\n    if(isNull(userToken)){\n      let params = new URLSearchParams(window.location.search);\n      let code = params.get(\"code\");\n      console.log(code);\n      if(!isNull(code)){\n        console.log(\"asd\");\n        getToken(code).then((data) => {\n          console.log(\"token\" + data.access_token);\n          setUserToken(data.access_token);\n\n          getUserInfo(data.access_token).then((data) => {\n            setUser(data);\n          });\n        });\n      }\n    }\n  }, []);\n\n  function populateTitles(input){\n    setTitles(input);\n    console.log(input);\n  }\n\n  function updateTitle(id, newTitle){\n    var tempTitles = titles;\n    tempTitles.set(id, newTitle);\n    setTitles(tempTitles);\n  }\n\n  function handleSelectedChange(id, title){\n    var tempTitle = titles.get(id);\n    tempTitle.selected = title;\n    updateTitle(id, tempTitle);\n  }\n\n  function handleImportCheckBox(id){\n    var tempTitle = titles.get(id);\n    tempTitle.import = !tempTitle.import;\n    updateTitle(id, tempTitle);\n  }\n\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route exact path=\"/\"> \n          {!isNull(userToken) ? <Redirect to=\"Home\"/> : <Login/>}\n        </Route>\n        <Route exact path=\"/Home\">\n          <ImportFromList populateTitles={(input) => populateTitles(input)}/>\n        </Route>\n        <Route exact path=\"/Home\" render={() => (\n          <ImportFromList />\n        )}/>\n        <Route exact path=\"/Import-Trakt\" render={() => (\n          <ImportToTrakt />\n        )}/>\n        <Route exact path=\"/Result\" render={() => (\n          <Result />\n        )}/>\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default Gateway;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Gateway from './components/Gateway';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Gateway />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}